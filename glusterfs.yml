- name: Configure GlusterFS on all nodes
  hosts: int_swarm # Targets all nodes for GlusterFS configuration
  become: true
  tasks:
    - name: Start and enable GlusterFS service # Ensures the GlusterFS service is running
      ansible.builtin.service:
        name: glusterd
        state: started
        enabled: true

    - name: Create brick directories for 5 volumes # Creates directories for 5 GlusterFS bricks
      ansible.builtin.file:
        path: "/gluster/brick{{ item }}"
        state: directory
        mode: "0755"
        owner: root
        group: root
      loop: [1, 2, 3, 4, 5]

    - name: Create 30GB files for each brick # Creates 30GB sparse files for brick storage
      ansible.builtin.command:
        cmd: "fallocate -l 30G /gluster/brick{{ item }}/brick.img"
        creates: "/gluster/brick{{ item }}/brick.img"
      loop: [1, 2, 3, 4, 5]

    - name: Format brick files with ext4 # Formats the brick files with ext4 filesystem
      ansible.builtin.filesystem:
        fstype: ext4
        dev: "/gluster/brick{{ item }}/brick.img"
      loop: [1, 2, 3, 4, 5]

    - name: Create mount points for bricks # Creates mount points for the brick filesystems
      ansible.builtin.file:
        path: "/gluster/mount{{ item }}"
        state: directory
        mode: "0755"
        owner: root
        group: root
      loop: [1, 2, 3, 4, 5]

    - name: Mount brick filesystems # Mounts the brick filesystems
      ansible.builtin.mount:
        path: "/gluster/mount{{ item }}"
        src: "/gluster/brick{{ item }}/brick.img"
        fstype: ext4
        opts: loop
        state: mounted
      loop: [1, 2, 3, 4, 5]

    - name: Create brick data directories # Creates data directories within mounted bricks
      ansible.builtin.file:
        path: "/gluster/mount{{ item }}/data"
        state: directory
        mode: "0755"
        owner: root
        group: root
      loop: [1, 2, 3, 4, 5]

- name: Create GlusterFS volumes on first manager
  hosts: int_swarm_managers[0] # Targets the first manager for volume creation
  become: true
  tasks:
    - name: Create 5 GlusterFS volumes with replicas # Creates 5 distributed-replicated volumes
      gluster.gluster.gluster_volume:
        name: "swarm-vol{{ item }}"
        state: present
        bricks: "{% for host in groups['int_swarm'] %}{{ hostvars[host]['ansible_default_ipv4']['address'] }}:/gluster/mount{{ item }}/data{% if not loop.last %},{% endif %}{% endfor %}"
        cluster: "{{ groups['int_swarm'] | map('extract', hostvars, 'ansible_default_ipv4') | map(attribute='address') | list }}"
        replicas: "{{ groups['int_swarm'] | length }}"
        force: true
        start_on_create: true
        rebalance: false
      loop: [1, 2, 3, 4, 5]

- name: Mount GlusterFS volumes on all Swarm nodes
  hosts: int_swarm_managers, int_swarm_workers # Targets both managers and workers for GlusterFS mount
  become: true
  gather_facts: true
  tasks:
    - name: Create mount points for GlusterFS volumes # Creates mount points for the 5 volumes
      ansible.builtin.file:
        path: "/mnt/swarm-vol{{ item }}"
        state: directory
        mode: "0755"
        owner: root
        group: root
      loop: [1, 2, 3, 4, 5]

    - name: Ensure GlusterFS volumes mount on boot # Configures fstab for the 5 GlusterFS volumes
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^localhost:/swarm-vol{{ item }}\s+/mnt/swarm-vol{{ item }}\s+glusterfs'
        line: "localhost:/swarm-vol{{ item }} /mnt/swarm-vol{{ item }} glusterfs defaults,_netdev 0 0"
        create: true
        mode: "0644"
      loop: [1, 2, 3, 4, 5]

    - name: Mount GlusterFS volumes immediately # Mounts the 5 GlusterFS volumes
      ansible.builtin.mount:
        path: "/mnt/swarm-vol{{ item }}"
        src: "localhost:/swarm-vol{{ item }}"
        fstype: glusterfs
        opts: defaults,_netdev
        state: mounted
      loop: [1, 2, 3, 4, 5]

    - name: Adjust permissions and ownership for GlusterFS mounts # Sets proper permissions for the mounts
      ansible.builtin.file:
        path: "/mnt/swarm-vol{{ item }}"
        owner: root
        group: docker
        state: directory
        recurse: true
      loop: [1, 2, 3, 4, 5]
